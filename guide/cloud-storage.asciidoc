[[guide-cloud-storage]]
[role="chunk-page chunk-toc"]
== Cloud storage

--
--

Scoreflex provides two kinds of storage:

* The game storage is a shared storage accessible by all your game's clients.
* The player storage is a restricted storage for each of your player/game pair.


[[guide-cloud-storage-game-storage]]
=== Game storage

[[guide-cloud-storage-game-storage-concepts]]
==== Concepts

Your game often comes bundled with configurations and various assets. It
can be painful to wait for a validation process in order to make changes in
your game. That's why we offer a key/value storage for your game that
you can use to instantly update some of your game resources.

For example, let's say you release a game and want to quickly configure
how ads are displayed to your players without releasing your game every
time you change your mind. Here is how you can do it easily:

* Release your game with a hardcoded configuration
* At game launch or on a timely basis fetch the game storage to get the
  latest version of the configuration. If you fetch a value use it,
  otherwise use the default configuration bundled with your game

The game storage can be viewed as a shared key/value storage for one of
your games. Only the game developer has the right to access it. The games
only have read access.

How you represent this data within your application is completely up to
you, but we recommend choosing a platform-independent format so that the
data can easily be read and written from any of the platforms your
application supports. For example, consider using a platform-neutral
format such as a JSON-encoded string.

[[guide-cloud-storage-game-storage-interact]]
==== Interact

You can use your web developer dashboard or the Management API to manage
your game storage.

[[guide-cloud-storage-game-storage-interact-setting-a-value]]
===== Setting a value

[source,sh]
----
$> curl -XPOST \
   'https://sandbox.api.scoreflex.com/v1/management/games/<GAME_ID>/storage/settings' \
   -d 'body={"enableAdMob":false,"enableChartboost":true}&accessToken=<DEVELOPER_ACCESS_TOKEN>&contentType=application/json&ttl=86400000'
----

[source,js]
----
{
  "success": true
}
----

[[guide-cloud-storage-game-storage-interact-getting-a-value]]
===== Getting a value

[source,sh]
----
$> curl -XGET \
   'https://sandbox.api.scoreflex.com/v1/management/games/<GAME_ID>/storage/settings?accessToken=<DEVELOPER_ACCESS_TOKEN>'
----

[source,js]
----
{
  "enableAdMob": false,
  "enableChartboost": true
}
----

[[guide-cloud-storage-game-storage-interact-deleting-a-value]]
===== Deleting a value

[source,sh]
----
$> curl -XDELETE \
   'https://sandbox.api.scoreflex.com/v1/management/games/<GAME_ID>/storage/settings?accessToken=<DEVELOPER_ACCESS_TOKEN>'
----

[source,js]
----
{
  "success": true
}
----

[[guide-cloud-storage-game-storage-interact-getting-a-value-from-a-game]]
[float]
===== Getting a value from a game

[source,sh]
----
$> curl -XGET \
   'https://sandbox.api.scoreflex.com/v1/storage/game/settings?accessToken=<ACCESS_TOKEN>'
----

[source,js]
----
{
  "enableAdMob": false,
  "enableChartboost": true
}
----

[[guide-cloud-storage-game-storage-reference]]
==== Reference

[[guide-cloud-storage-game-storage-reference-storage-entry]]
===== Storage Entry

A storage entry has the following attributes:

* +key+. String matching +[0-9a-zA-Z_]{1,20}+. Used to get/set an item
* +body+. String less than 1ko. The content.
* +TTL+. The time to live of the entry in ms. 0 meaning the value will
  live forever.
* +contentType+. The content type of the body. It is included in the
  header of the response when getting the storage entry.

[[guide-cloud-storage-game-storage-reference-apis]]
===== APIs

* http://developer.scoreflex.com/docs/reference/api/v1#post__v1_management_games_gameId_storage_key[set value API reference]
* http://developer.scoreflex.com/docs/reference/api/v1#get__v1_management_games_gameId_storage_key[get value API reference]
* http://developer.scoreflex.com/docs/reference/api/v1#delete__v1_management_games_gameId_storage_key[delete value API reference]
* http://developer.scoreflex.com/docs/reference/api/v1#get__v1_storage_game_key[get value from game API reference]

[[guide-cloud-storage-player-storage]]
=== Player storage

--
--

[[guide-cloud-storage-player-storage-concepts]]
==== Concepts

The player storage allows you to store application data for each player
of your game on Scoreflex's servers. Your application can retrieve and
update this user data from any devices using the
http://developer.scoreflex.com/docs/reference/api/v1#StorageService[Storage
Service API]. This service makes it possible to synchronize data for
each player of your game across multiple devices and platforms. For
example, if you have a game that runs on Android, iOS, and the web, you
can use the Storage Service service to allow a user to start a game on
their Android phone, and then continue playing on a tablet, iOS device,
or web browser without losing any of their progress. This service can
also be used to ensure that a user's game play continues from where it
left off even if their device is lost, destroyed, or traded in for a
newer model.

Typical examples of data that can be saved are player's preferences,
progression and everything that should be restored to ensure the best
possible cross-device experience for a player playing on more than one
device.

NOTE: You don't need to use the player storage to maintain your
players' high scores or achievements as these data are automatically
saved and retrievable from dedicated APIs.

Only the player of a game can read and write his own dedicated storage
for a specific game. The player storage is a simple key/value database.

How you represent this data within your application is completely up to
you, but we recommend choosing a platform-independent format so that the
data can easily be read and written from any of the platforms your
application supports. For instance, consider using a platform-neutral
format such as a JSON-encoded string.

[[guide-cloud-storage-player-storage-conflicts]]
===== Conflicts

When using the player storage service, your application may encounter conflicts when
attempting to save data. These conflicts can occur when a player is running more than
one instance of your game on different devices or computers. Your game
can resolve these conflicts in a way that provides the best user experience.

Typically, data conflicts occur when an instance of your application is unable to
reach the storage service while attempting to load data or save it. In general, the
best way to avoid data conflicts is to always load the latest data from the service
when your application starts up or resumes, and save data to the service with
reasonable frequency. However, it is not always possible to avoid data conflicts.
Your application should make every effort to handle conflicts such that your
users' data is preserved and that they have a good experience.

The following scenario describes how the storage service detects and responds to data
state conflict for a game application that tracks the total of stars earnt in the game.

. A player runs a game on their phone and has a total of 100 stars, which the game sends to the storage service and is automatically marked as version T1.
. The player later runs the same game on their tablet device, which retrieves the T1 state and updates the game progress.
. The player continues playing the game from where they left off and has a total of 300 stars, which the game saves to the cloud and is marked as version T2.
. Later on, the player is commuting home on the train and pulls out their phone to continue playing the game.
  However, the train doesn't have wireless service, so the application cannot retrieve the currently saved state from the cloud.
. The player plays the game and has a total of 200 stars.
. Eventually, the player reaches a location where they can get wireless service and the game attempts to save their progress, sending
state data and the last version string it knows about (T1).
. The storage service checks the provided version string T1 against the currently saved version string T2, recognizes the conflict and returns
  a conflict message to the application.

To sum up you can decide to ignore the conflicts by not providing +version+ parameter when saving a value to the storage service. If you want to address
this issue for a better user experience you would proceed as follows:

. When getting a value from the storage service the current version will be returned in the +X-Version+ HTTP header.
. When you save a value from the storage service you set the +version+ parameter with the last version you are aware of. Two situations
can then happen:
.. The currently saved version matches the one you have provided, the new value is saved and everything is fine.
.. The currently saved version differs from the one you have provided. You need to get the value and version saved in the cloud. You can then merge the changes
you wanted to save initially in the value you have just retrieved from the cloud. You can then retry to save the merged value in the cloud by giving
the version you have just retrieved.


[[guide-cloud-storage-player-storage-interact]]
==== Interact

[[guide-cloud-storage-player-storage-interact-setting-a-value]]
===== Setting a value

[source,sh]
----
$> curl -XPOST \
   'https://sandbox.api.scoreflex.com/v1/storage/preferences' \
   -d 'body=\{"musicVolume":0}&accessToken=<ACCESS_TOKEN>&contentType=application/json&ttl=86400000'
----

[source,js]
----
{
  "success": true
}
----

[[guide-cloud-storage-player-storage-interact-getting-a-value]]
===== Getting a value

[source,sh]
----
$> curl -XGET \
   'https://sandbox.api.scoreflex.com/v1/storage/preferences?accessToken=<ACCESS_TOKEN>'
----

[source,js]
----
{
  "musicVolume": 0
}
----

[[guide-cloud-storage-player-storage-interact-deleting-a-value]]
===== Deleting a value

[source,sh]
----
$> curl -XDELETE \
   'https://sandbox.api.scoreflex.com/v1/storage/preferences?accessToken=<ACCESS_TOKEN>'
----

[source,js]
----
{
  "success": true
}
----

[[guide-cloud-storage-player-storage-reference]]
==== Reference

[[guide-cloud-storage-player-storage-reference-storage-entry]]
===== Storage Entry

A storage entry has the following attributes:

* +key+. String matching +[0-9a-zA-Z_]{1,20}+. Used to get/set an item
* +body+. String less than 1ko. The content.
* +TTL+. The time to live of the entry in ms. 0 meaning the value will
  live forever.
* +contentType+. The content type of the body. It is included in the
  header of the response when getting the storage entry.
* +version+. It is the timestamp of the last update for the entry.
It can be used for conflicts resolution.

[[guide-cloud-storage-player-storage-reference-apis]]
===== APIs

* http://developer.scoreflex.com/docs/reference/api/v1#post__v1_storage_key[set value API reference]
* http://developer.scoreflex.com/docs/reference/api/v1#get__v1_storage_key[get value API reference]
* http://developer.scoreflex.com/docs/reference/api/v1#delete__v1_storage_key[delete value API reference]
